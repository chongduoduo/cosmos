//Script GUID:deabb963-806d-45da-8077-106a6de0b9ec
//Used for tracking history
#DECLARE DaysStart int = 7;
#DECLARE DaysEnd int = 2;
#DECLARE today int = 4;
#DECLARE yesterday int = 5;

#DECLARE StartDate string = DateTime.Today.AddDays(-@DaysStart).ToString("yyyy-MM-dd");//@"2016-08-25"; //CheckData-3
#DECLARE EndDate string = DateTime.Today.AddDays(-@DaysEnd).ToString("yyyy-MM-dd");//@"2016-08-30"; //CheckData+2
#DECLARE QueryStartTime string =  DateTime.Today.AddDays(-@yesterday).ToString("yyyy-MM-dd")+@" 09:00:00";//@"2016-08-27 09:00:00"; //CheckData-1
#DECLARE QueryEndTime string = DateTime.Today.AddDays(-@today).ToString("yyyy-MM-dd")+@" 09:00:00";//@"2016-08-28 09:00:00";//CheckData
#DECLARE CheckDate string = DateTime.Today.AddDays(-@today).ToString("yyyy-MM-dd");//@"2016-08-28";

//#DECLARE OutputFile string = string.Format(@"/users/mmaisda/sogouads/201608_test/TotalLogSogou0820_{0}-{1}.ss", @StartDate, @EndDate);
#DECLARE SumFile string = string.Format (@"/users/mmaisda/sogouads/"+DateTime.Today.AddDays(-@today).ToString("yyyyMM")+@"_test/SumFile_{0}.csv", @CheckDate);
#DECLARE SRPVFilteredFile string = string.Format (@"/users/mmaisda/sogouads/"+DateTime.Today.AddDays(-@today).ToString("yyyyMM")+@"_test/SRPVFileFiltered_{0}.csv", @CheckDate);
#DECLARE DSQFile string = string.Format(@"/users/mmaisda/sogouads/DSQ_test/DSQ_{0}.csv", @CheckDate);

#DECLARE BSRPVFile string = string.Format (@"/users/mmaisda/sogouads/"+DateTime.Today.AddDays(-@today).ToString("yyyyMM")+@"_test/BSRPVFile_{0}.csv", @CheckDate);
#DECLARE BSRPVFilteredFile string = string.Format (@"/users/mmaisda/sogouads/"+DateTime.Today.AddDays(-@today).ToString("yyyyMM")+@"_test/BSRPVFileFiltered_{0}.csv", @CheckDate);


SlapiPageViewDaily =
    VIEW @"/shares/searchDM/distrib/released/SLAPI/SearchLogPageView.view"
    PARAMS
    (
        Start = @StartDate,
        End = @EndDate,
        Dataset = "Bing.com",
        UseSample = false,
        ReturnAbnormalTraffic = true
    );

slapidata=
    SELECT //ClientId.ToLower() AS ClientId,
           //Request_ImpressionGuid AS ImpressionGuid,
           Request_RequestTime AS RequestTime,
           //Vertical,
           Request_IsNormalTraffic,
           Metrics_DistinctQueryCountVerticalWithinVisit,/*DSQ field*/
           //Query_IsNormal,
           //FormCode,
           //Page_Entities_Ads != null ? (Page_Entities_Ads.Clicks.Count) : 0 AS AdsClicksCount,
           //Page_Entities_Ads != null ? (Page_Entities_Ads.Count) : 0 AS AdsShow, 
           //Metrics_AdItemCount AS AdImpression,
           //Metrics_AdClickCount AS MeAdsClicksCount,
           //Page_Entities_Ads.Select( a => IfSogouAd(a) ? 1 : 0).Sum() >0 ? 1 : 0 AS IsSogou,
           Page_Entities_Ads.Select( a => IfSogouAd(a) ? 1 : 0).Sum() AS SogouIM,
           Page_Entities_Ads.Select( a => IfSogouAd(a) ? a.Clicks.Count : 0).Sum() AS SogouClicks
       
    FROM SlapiPageViewDaily
    WHERE Market.ToLower() == "zh-cn" 
          AND Request_RequestTime < Convert.ToDateTime(@QueryEndTime) AND Request_RequestTime >= Convert.ToDateTime(@QueryStartTime)
          AND Query_IsNormal 
          AND Vertical.ToLower() == "web";    

//OUTPUT slapidata TO SSTREAM @OutputFile;

Sumdata = 
    SELECT COUNT() AS SRPV, SUM(SogouIM) AS SogouIM, SUM(SogouClicks) AS SogouClicks
    FROM slapidata
    ;

OUTPUT Sumdata TO @SumFile;

SRPVFiltereddata = 
    SELECT COUNT() AS SRPVF, SUM(SogouIM) AS SogouIMF, SUM(SogouClicks) AS SogouClicksF
    FROM slapidata
    //;
    WHERE Request_IsNormalTraffic
    ;

OUTPUT SRPVFiltereddata TO @SRPVFilteredFile;

DSQData = 
SELECT SUM(Metrics_DistinctQueryCountVerticalWithinVisit) AS DSQ
    FROM slapidata
    WHERE Request_IsNormalTraffic
    ;

OUTPUT DSQData TO  @DSQFile;

BSRPVdata = 
    SELECT COUNT() AS BSRPV
    FROM slapidata
    WHERE SogouIM>0
    ;

OUTPUT BSRPVdata TO @BSRPVFile;

BSRPVFiltereddata = 
    SELECT COUNT() AS BSRPVF
    FROM slapidata
    WHERE Request_IsNormalTraffic AND SogouIM>0
    ;
OUTPUT BSRPVFiltereddata TO @BSRPVFilteredFile;

#CS
public static bool IfSogouAd(Ad a)
{
   var urls = new List<string>();
    string url = "";

    if (a.DataSource.TryGetProperty("Url", out url)) 
    {
        urls.Add(url);
    }
    //Page_Entities_Ads[0].Children.FindElementsWithProperty("T","D.Url")[0].DataSource.GetDataPropertyOrDefault("Url","None")
    //Page_Entities_Ads[0].Children.WhereElementHasChildWithProperty("T","D.Url")[0].DataSource.FindElementsWithProperty("T","D.Url")[0].GetDataPropertyOrDefault("Url","None")
    
    var s=a.Children.FindElementsWithProperty("T","D.Url");
    if(s.Count>0)
    {
        foreach(var ds in s)
        {
            url = ds.DataSource.GetDataPropertyOrDefault("Url","None");
            urls.Add(url);
        }
    }

    /*
    if (a.Children.WhereElementHasChildWithProperty("T","D.Url").Count > 0) 
    {
        foreach(var s in a.Children.WhereElementHasChildWithProperty("T","D.Url"))
        {
            if(s.DataSource.FindElementsWithProperty("T","D.Url").Count > 0)
            {
                foreach(var e in s.DataSource.FindElementsWithProperty("T","D.Url"))
                {
                    url=e.GetDataPropertyOrDefault("Url","None");
                    urls.Add(url);
                   
                }
            }
        }
    }
    */
    return urls.Distinct().Where(u => u != "").Any(u => u.Contains("www.sogou.com/websearch/xml"));
}

/*
public static bool IfMsnAd(Ad b)
{
   var urls = new List<string>();
    string url = "";

    if (b.DataSource.TryGetProperty("Url", out url)) 
    {
        urls.Add(url);
    }
    //Page_Entities_Ads[0].Children.FindElementsWithProperty("T","D.Url")[0].DataSource.GetDataPropertyOrDefault("Url","None")
    //Page_Entities_Ads[0].Children.WhereElementHasChildWithProperty("T","D.Url")[0].DataSource.FindElementsWithProperty("T","D.Url")[0].GetDataPropertyOrDefault("Url","None")
    
    var s=b.Children.FindElementsWithProperty("T","D.Url");
    if(s.Count>0)
    {
        foreach(var ds in s)
        {
            url = ds.DataSource.GetDataPropertyOrDefault("Url","None");
            urls.Add(url);
        }
    }
    return urls.Distinct().Where(u => u != "").Any(u => u.Contains(".r.msn.com"));
}*/

#ENDCS
